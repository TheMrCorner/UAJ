using System.Collections;
using System.Collections.Generic;
using System.IO;
using SimpleJSON;

public class Tracker
{
    // -------------------- VARIABLES -------------------- //
    private string TELEMETRY_PATH = "Assets/Telemetry/Results/";

    private static Tracker instance;

    private static Queue<TrackerEvent> _eventQueue;

    private JSONObject _jsonData;
    private string _fileName = "";

    // -------------------- FUNCIONES -------------------- //

    public static Tracker Instance
    {
        get
        {
            if (instance == null)
            {
                instance = new Tracker();
                _eventQueue = new Queue<TrackerEvent>();
                instance.GetJSONFile();
            }
            return instance;
        }
    }

    // Adds an event to the event queue
    public void AddEvent(TrackerEvent trackerEvent)
    {
        _eventQueue.Enqueue(trackerEvent);
    }

    // Dumps the set number of events to json 
    // If numEvents == -1, dumps all the events left in the queue
    public void DumpEventsToJson(int numEvents = -1)
    {
        if(_eventQueue.Count > 0)
        {
            //JSONObject file = GetJSONFile();
            JSONArray file = GetJSONFile();
            if (numEvents > 0)
            {
                for(int i=0; i<numEvents && _eventQueue.Count>0; i++)
                {
                    JSONObject obj = new JSONObject();
                    TrackerEvent auxTE = _eventQueue.Dequeue();
                    auxTE.DumpEventDataToJson(ref obj);
                    file.Add(obj);
                }
            }
            else
            {
                while (_eventQueue.Count > 0)
                {
                    JSONObject obj = new JSONObject();
                    TrackerEvent auxTE = _eventQueue.Dequeue();
                    auxTE.DumpEventDataToJson(ref obj);
                    file.Add(obj);
                }
            }
            File.WriteAllText(TELEMETRY_PATH + _fileName + ".json", file.ToString(4));
        }
    }

    // If it has a fileName assigned, returns the file and will add data there
    // If it hasn't, finds the amount of files with the same date as filename
    // If none, assigns "date_1", if some "date_X" (each number refers to a play that day)
    // Saves all the data as Telemetry/Results/date/date_0.json
    private JSONArray GetJSONFile()
    {
        string auxFileName = System.DateTime.Now.ToShortDateString();
        auxFileName = auxFileName.Replace("/", "");
        
        string auxFilePath;
        int numPlaysToday;

            // tries to find the file already created in this play to add data to it
        if (_fileName != "")
        {
            auxFilePath = TELEMETRY_PATH + "/" + _fileName + ".json";
            string jsonaux = File.ReadAllText(auxFilePath);
            JSONArray o = JSON.Parse(jsonaux).AsArray;
            return o;
        }
        // if its the first time it tries to dump data in this play, tries to find the folder and the amount of previous files today
        else
        {
            TELEMETRY_PATH += (auxFileName + "/");
            // searches for the folder with all the data from previous plays today
            // if none found, creates empty folder
            if (Directory.Exists(TELEMETRY_PATH))
            {
                // counts only json files, not the autogenerated metas
                numPlaysToday = Directory.GetFiles(TELEMETRY_PATH, "*.json").Length;
            }
            else 
            {
                Directory.CreateDirectory(TELEMETRY_PATH);
                numPlaysToday = 0;
            }
            _fileName = auxFileName + "_" + numPlaysToday;
            auxFilePath = TELEMETRY_PATH + "/" + _fileName + ".json";
            File.WriteAllText(auxFilePath, new JSONArray().ToString());
        }     
        
        return new JSONArray();
    }

}
